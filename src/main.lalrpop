use std::str::FromStr;
use aalang::ast::{Expr, Opcode};

grammar;


// lexer

Float  : f64 = <s:r"[0-9]+((\.[0-9]+)([eE][0-9]+)?|([eE][0-9]+))">      => f64::from_str(s).unwrap();
Int    : i64 = <s:r"[0-9]+">                           => i64::from_str(s).unwrap();

Identifer    = r"[a-zA-Z_][a-zA-Z0-9_]*";



// parser

pub Expr: Box<Expr> = {
    Expr ExprOp Factor      => Box::new(Expr::OpExpr(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};


Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::OpExpr(<>)),
    Term
};


FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod,
    "**" => Opcode::Pow,
};

Term: Box<Expr> = {
    Int => Box::new(Expr::Int(<>)),
    Float => Box::new(Expr::Float(<>)),
    "(" <Expr> ")",
};