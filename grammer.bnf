S      ::= expr
expr   ::= logic


logic ::= logic "&&" equality | logic "||" equality | equality

equality ::= relational "==" relational | relational "!=" relational | relational
relational ::= add "<" add | add "<=" add | add ">" add | add ">=" add | add

add    ::= add '+' mul | add '-' mul | mul
/*
add    ::= mul add'
add'   ::= "" | '+' mul' | '-' mul'
 */

mul    ::= mul '*' unary | mul '/' unary | mul '%' unary | unary
/*
mul    ::= unary mul'
mul'   ::= "" | '*' mul' | '/' mul'
 */

unary  ::= '-' unary | '+' unary | primary
primary::= (expr) | num | identifity | function_call
function_call ::= identifity "("  ")"
num    ::= integer | float


function_def ::= "fn" identifity "(" ")" ("->" identifity)? "{" (expr ';'?)* "\n" "}"